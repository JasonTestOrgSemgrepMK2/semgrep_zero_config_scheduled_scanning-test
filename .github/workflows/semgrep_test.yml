name: TEST- Semgrep Scheduled Scan on Repos

on:
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}

jobs:
  get-list-of-repos-and-perform-semgrep-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install requests
        pip install pandas
        
    - name: Get list of repositories
      env:
        # Connect to Semgrep Cloud Platform through your SEMGREP_APP_TOKEN.
        # Generate a token from Semgrep Cloud Platform > Settings
        # and add it to your GitHub secrets.
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

        # Generate PAT with Read-Only access to all repos in your GH ORG
        PAT: ${{ secrets.PAT_READ_ONLY_CUSTOMER_REPO }}

        # Generate PAT with permissions to initiate repository dispatch in AppSec repo in your AppSec GH ORG
        PAT_REPOSITORY_DISPATCH_APPSEC_REPO: ${{ secrets.GITHUB_TOKEN }}

        # Name of the AppSec Repo where the scans will be performed
        APPSEC_REPO_WHERE_SCANS_DONE: ${{ vars.APPSEC_REPO_WHERE_SCANS_DONE }}

        # Name of the AppSec Org where the scans will be performed. This can be the same as the Org where other repos are
        APPSEC_ORG_WHERE_SCANS_DONE: ${{ vars.APPSEC_ORG_WHERE_SCANS_DONE }}

        # Wait time (in seconds) between triggering Semgrep Scans 
        WAIT_TIME_BETWEEN_SCANS: ${{ vars.WAIT_TIME_BETWEEN_SCANS }}

      run: |
        import requests
        import os
        import requests
        import logging
        import time
        import pandas as pd
      
        # Set up logging
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        # GitHub repository in the format "org_name/repo_name"
        full_repo_name = os.environ['GITHUB_REPOSITORY']
        # Extract the organization name
        org_name = full_repo_name.split('/')[0]
        print("Organization Name:", org_name)
        pat = os.environ['PAT']
        headers = {'Authorization': f'token {pat}'}

        response = requests.get(f'https://api.github.com/orgs/{org_name}/repos', headers=headers)
        repos = response.json()

        # Replace 'your_file.csv' with the path to your CSV file
        csv_file = 'daily.csv'
        df = pd.read_csv(csv_file)
        
        for repo in repos:			
          
          repo_name = repo['name']
          # Check if the value exists in any cell of the DataFrame
          if df.isin([repo_name]).any().any():
            print(f'The value "{repo_name}" exists in the daily scan list.')              
            repo_full_name = repo['full_name']
            repo_branch = repo['default_branch']
  
            repo_url = repo['clone_url']
            repo_clone_url = repo['clone_url']
            print(f"Repo Name: {repo_name}, Repo URL: {repo_url}")
  
        
            # GitHub API URL for repository_dispatch
            scanning_repo = os.environ['APPSEC_REPO_WHERE_SCANS_DONE']
            print(f"repository = os.environ['APPSEC_REPO_WHERE_SCANS_DONE']: {scanning_repo}")
            # repository = 'nn-zcs'
            scanning_org_name = os.environ['APPSEC_ORG_WHERE_SCANS_DONE']
            print(f"org_name = os.environ['APPSEC_ORG_WHERE_SCANS_DONE']: {scanning_org_name}")
            # org_name = 'nitinNayar'
            url = f'https://api.github.com/repos/{scanning_org_name}/{scanning_repo}/dispatches'
            # https://api.github.com/repos/nitinNayar/nn-zcs/dispatches \ -d '{"event_type": "clone-repo-event", "client_payload": {"repository_name": "ssc-nnayar-r2c-mojito", "git_url": "https://github.com/nn-ssc-scans/ssc-nnayar-r2c-mojito.git", "pat": "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"}}'
        
            # Headers for the request
            # token below allows to make Repository Dispatch calls to the GH repo/ GH Org where the scans will be done
            token = os.environ['PAT_REPOSITORY_DISPATCH_APPSEC_REPO']
            print(f"token = os.environ['PAT_REPOSITORY_DISPATCH_CUSTOMER_REPO']: {token}")
            # token = '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'
            headers = {
                'Authorization': f'Bearer {token}',
                'Accept': 'application/vnd.github.v3+json'
            }
        
            # Payload for the repository_dispatch event
            # Change 'event_type' and 'client_payload' as per your requirements			    
            payload = {
                'event_type': 'zcs-event',
                'client_payload': { "repository_name": repo_name, "repository_full_name": repo_full_name, "git_url": repo_clone_url }
                # 'client_payload': { "repository_name": repo_name, "repository_full_name": repo_full_name, "git_url": repo_clone_url, "pat": "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" }
            }
        
            # Make the POST request
            response = requests.post(url, headers=headers, json=payload)
        
            # Log the response from GitHub
            print(response.status_code)
            # print(response.status_code)
            # print(response.json())

            wait_time = os.environ['WAIT_TIME_BETWEEN_SCANS']
            print(f'wait time is {wait_time}')
            print(f'type of wait time is {type(wait_time)}')
            time.sleep(int(wait_time)) #sleep for XX seconds before starting next scan
          else:
            print(f'The value "{repo_name}" does not exist in the daily scan list.')
          
      shell: python
